package database

import (
	"math/big"

	"github.com/ethereum/go-ethereum/core/types"
	_ "github.com/lib/pq"
	"github.com/metachris/eth-reorg-monitor/monitor"
	"github.com/metachris/eth-reorg-monitor/reorgutils"
	flashbotsrpc "github.com/metachris/flashbots-rpc"
)

var Schema = `
CREATE TABLE IF NOT EXISTS reorgs (
    Id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,

    Key      VARCHAR (40) NOT NULL UNIQUE,
    NodeUri  VARCHAR (50) NOT NULL,
    SeenLive boolean NOT NULL,

    StartBlockNumber   integer NOT NULL,
    EndBlockNumber     integer NOT NULL,
    Depth              integer NOT NULL,
    NumBlocksInvolved  integer NOT NULL,
    NumBlocksReplaced  integer NOT NULL,
    MermaidSyntax text NOT NULL
);

CREATE TABLE IF NOT EXISTS blocks_with_earnings (
    Id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,

    Reorg_Key VARCHAR (40) REFERENCES reorgs (Key) NOT NULL,

    BlockNumber     integer NOT NULL,
    BlockHash       text NOT NULL,
    ParentHash      text NOT NULL,
    BlockTimestamp  integer NOT NULL,
    CoinbaseAddress text NOT NULL,

    Difficulty bigint  NOT NULL,
    NumUncles  integer NOT NULL,
    NumTx      integer NOT NULL,

    IsPartOfReorg boolean NOT NULL,
    IsMainChain   boolean NOT NULL,
    IsUncle       boolean NOT NULL,
    IsChild       boolean NOT NULL,

    MevGeth_CoinbaseDiffWei      NUMERIC(48, 0),
    MevGeth_GasFeesWei           NUMERIC(48, 0),
    MevGeth_EthSentToCoinbaseWei NUMERIC(48, 0),

    MevGeth_CoinbaseDiffEth      VARCHAR(10),
    MevGeth_EthSentToCoinbase    VARCHAR(10)
);
`

type ReorgEntry struct {
	Id int

	Key      string
	NodeUri  string
	SeenLive bool

	StartBlockNumber  uint64
	EndBlockNumber    uint64
	Depth             int
	NumBlocksInvolved int
	NumBlocksReplaced int
	MermaidSyntax     string
}

func NewReorgEntry(reorg *monitor.Reorg) ReorgEntry {
	return ReorgEntry{
		Key:               reorg.Id(),
		NodeUri:           reorg.NodeUri,
		SeenLive:          reorg.SeenLive,
		StartBlockNumber:  reorg.StartBlockHeight,
		EndBlockNumber:    reorg.EndBlockHeight,
		Depth:             reorg.Depth,
		NumBlocksInvolved: len(reorg.BlocksInvolved),
		NumBlocksReplaced: reorg.NumReplacedBlocks,
		MermaidSyntax:     reorg.MermaidSyntax(),
	}
}

type BlockEntry struct {
	Id        int
	Reorg_Key string

	BlockNumber     uint64
	BlockHash       string
	ParentHash      string
	BlockTimestamp  uint64
	CoinbaseAddress string

	Difficulty uint64
	NumUncles  int
	NumTx      int

	IsPartOfReorg bool
	IsMainChain   bool
	IsUncle       bool
	IsChild       bool

	MevGeth_CoinbaseDiffWei      string
	MevGeth_GasFeesWei           string
	MevGeth_EthSentToCoinbaseWei string

	MevGeth_CoinbaseDiffEth   string
	MevGeth_EthSentToCoinbase string
}

func NewBlockEntry(block *types.Block, reorg *monitor.Reorg, callBundleResponse *flashbotsrpc.FlashbotsCallBundleResponse) BlockEntry {
	_, isPartOfReorg := reorg.BlocksInvolved[block.Hash()]
	_, isMainChain := reorg.MainChainHashes[block.Hash()]
	isUncle := !isMainChain && block.NumberU64() == reorg.StartBlockHeight
	isChild := !isMainChain && !isUncle

	blockEntry := BlockEntry{
		Reorg_Key: reorg.Id(),

		BlockNumber:     block.NumberU64(),
		BlockHash:       block.Hash().String(),
		ParentHash:      block.ParentHash().String(),
		BlockTimestamp:  block.Time(),
		CoinbaseAddress: block.Coinbase().String(),

		Difficulty: block.Difficulty().Uint64(),
		NumUncles:  len(block.Uncles()),
		NumTx:      len(block.Transactions()),

		IsPartOfReorg: isPartOfReorg,
		IsMainChain:   isMainChain,
		IsUncle:       isUncle,
		IsChild:       isChild,

		MevGeth_CoinbaseDiffWei:      "-1",
		MevGeth_GasFeesWei:           "-1",
		MevGeth_EthSentToCoinbaseWei: "-1",

		MevGeth_CoinbaseDiffEth:   "-1",
		MevGeth_EthSentToCoinbase: "-1",
	}

	if callBundleResponse != nil {
		coinbaseDiffWei := new(big.Int)
		coinbaseDiffWei.SetString(callBundleResponse.CoinbaseDiff, 10)
		coinbaseDiffEth := reorgutils.WeiToEth(coinbaseDiffWei)

		ethSentToCoinbaseWei := new(big.Int)
		ethSentToCoinbaseWei.SetString(callBundleResponse.EthSentToCoinbase, 10)
		ethSentToCoinbase := reorgutils.WeiToEth(ethSentToCoinbaseWei)

		blockEntry.MevGeth_CoinbaseDiffWei = callBundleResponse.CoinbaseDiff
		blockEntry.MevGeth_GasFeesWei = callBundleResponse.GasFees
		blockEntry.MevGeth_EthSentToCoinbaseWei = callBundleResponse.EthSentToCoinbase

		blockEntry.MevGeth_CoinbaseDiffEth = coinbaseDiffEth.Text('f', 6)
		blockEntry.MevGeth_EthSentToCoinbase = ethSentToCoinbase.Text('f', 6)
	}

	return blockEntry
}
